/*
external.js
James Watson, 2015 January
Handle communication between REPLacement and the environment not handled by the evaluator: environment-dependent, file operations, etc
*/

/*
  == LOG ==
2015-01-31: Corrected index check in 'External.readln_from_current_file'
2015-01-29: Wrote 'External.readln_from_current_file', tested OK
2015-01-27: * 'External.load' is able to parse a file into lines
            * Call to 'getFile' in 'External.load' referred to an old 'External' structure, repaired
2015-01-26: 'External.load' is able to load a file by name from the 'External.curDirObjct'
2015-01-24: 'External.choose_file_load_path' now finds full path string
2015-01-23: It was necessary to add "directory" to the 'fileSystem' permissions in order to get the dialog box to open
2015-01-19: File created

  == NOTES ==
2015-01-29: Parsing the lines of the loaded file is the responsibility of the client code: the evaluator. The current design is that the evaluator should
            reach out and call 'External' functions, not the other way around. This way the work involved in porting REPLacement file features to other 
            environments is reduced
2015-01-27: * 'FileReader' does not have a facility for reading a text file by lines, client code must divide the returned string as desired
            * URL: https://developer.mozilla.org/en-US/docs/Web/API/FileReader
2015-01-26: * At the moment, Chrome 'fileSystem' does not have a stock means to reach local directories other than a chooser dialog box. (This is likely
              for security reasons.) Once a 'DirectoryEntry' has been created, you can then use file name strings to reach the individual files 
              programmatically. In this case via a call to a load function within REPLacement.
            * URL: http://www.developer.com/lang/reading-and-writing-files-in-chrome-installed-applications.html
            * URL: www.html5rocks.com/en/tutorials/file/filesystem/
            * URL: https://developer.mozilla.org/en-US/docs/Web/API/DirectoryEntry
            * URL: https://developer.mozilla.org/en-US/docs/Web/API/FileEntry
2015-01-19: For the time being file saving will be left to the user's preferred source editor, only loading will be handled

  == TODO ==
* Each time such an object is constructed, it should be checked whether the file that is pointed to is readable/writeable
*/

var External = {}; // The 'External' object is a singleton that holds functions and vars for external operations

// Store current working directory and file for use by 'External' methods
External.curPath = { // The current working directory, the root directory for all file load operations
	name : "", //- String, text representation of the current path
	objt : null // Object, 'DirectoryEntry' of the current path
};
External.curFile = { // File currently open
	name : "", // -- String,  Name of the file
	objt : null, //- Object,  'FileEntry' of the file
	lins : [], // -- Array,   Lines of the file, each element is a string
	lnnm : 0, // --- Number,  The line number being read from the file
	lsln : -1, // -- Number,  The last line that was read 
	lodd : false, // Boolean, Flag for whether the last load attempt was successful
	rEOF : false //- Boolean, Flag for whether the last line of the file has been read (not actual EOF character)
};


//External.curFile.lins = [1,2,3];

External.set_file_load_path = function(){ // Put the load path in app storage

};

External.choose_file_load_path = function(){ // Open a dialog for a user to choose a load path and store path name

	chrome.fileSystem.chooseEntry(
		{ type: 'openDirectory' },
		function(dirEntry, entryProps){ 
			External.curPath.objt = dirEntry;
			chrome.fileSystem.getDisplayPath(
				dirEntry, 
				function(displayPath){ 
					External.curPath.name = displayPath;
					// Works in both Version 39.0.2171.95 and HOMECOMPVERSION
					preDebug.innerText = displayPath; // FIXME: Remove debug behavior
				} 
			);
			//External.read_file_in_load_path( "testFile.txt" );
		}
	);

};

External.read_file_in_load_path = function(nameStr){ // Read the lines of 'nameStr' into 'External.curFile.lins'
	External.curPath.objt.getFile( // call 'DirectoryEntry.getFile' to fetch a file in that directory 
		nameStr,
		{create: false},
		function(fileEntry){ // action to perform on the fetched file, success
			External.curFile.name = nameStr; // store the file name for later use
			External.curFile.objt = fileEntry; // store the 'FileEntry' for later use
			External.curFile.objt.file( function(file){ // Returns 'File' object associated with selected file. Use this to read the file's content.
				var reader = new FileReader();
				reader.onloadend = function(e){
					var contents = this.result;
					// URL, split string into lines: http://stackoverflow.com/questions/12371970/read-text-file-using-filereader
					External.curFile.lins = contents.split('\n'); // split the string result into individual lines
					External.curFile.lnnm = 0; // Set current line to 0 for the newly-loaded file
					External.curFile.rEOF = false; // Reset EOF flag
					External.curFile.lodd = true;
				};
				reader.readAsText(file);
			} );
		},
		function(e){ External.curFile.lodd = false; } // There was an error 
	);
};

External.readln_from_current_file = function(){ // Return the next line of the current file, otherwise return 'null'
	var rtnStr = null; // Default error code
	if( External.curFile.lnnm < External.curFile.lins.length ){ // Check that the line number is valid
		rtnStr = External.curFile.lins[External.curFile.lnnm];
		External.curFile.lsln = External.curFile.lnnm; // Set the line number as the last line read
		External.curFile.lnnm = External.curFile.lnnm + 1; // advance line number to the next line
		if( External.curFile.lnnm >= External.curFile.lins.length ){ External.curFile.rEOF = true; } // check, set EOF flag true
	} // else the error code will be returned below
	return rtnStr;
};
